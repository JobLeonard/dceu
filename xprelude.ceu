;; is', isnot'

func is' (v1,v2) {
    ifs {
        (v1 == v2)         -> true
        (type(v2) /= :tag) -> false
        (type(v1) == v2)   -> true
        tags(v1,v2)        -> true
        else -> false
    }
}

func isnot' (v1,v2) {
    not is'(v1,v2)
}

;; ARITHMETIC:  +  -  *  /  %  **  //

func {+} (v1, v2) {
    if (v1 isnot :number) or (v2 isnot :number) {
        throw(:error)
    }
    `:number ($v1.Number + $v2.Number)`
}

func {-} (v1, v2) {
    ifs {
        (v1 is :number) and (v2 is :nil) -> {
            `:number (- $v1.Number)`
        }
        (v1 isnot :number) or (v2 isnot :number) -> {
            throw(:error)
        }
        else -> {
            `:number ($v1.Number - $v2.Number)`
        }
    }
}

func {*} (v1, v2) {
    if (v1 isnot :number) or (v2 isnot :number) {
        throw(:error)
    }
    `:number ($v1.Number * $v2.Number)`
}

func {**} (v1, v2) {
    if (v1 isnot :number) or (v2 isnot :number) {
        throw(:error)
    }
    `:number powf($v1.Number, $v2.Number)`
}

func {/} (v1, v2) {
    if (v1 isnot :number) or (v2 isnot :number) {
        throw(:error)
    }
    `:number ($v1.Number / $v2.Number)`
}

func {//} (v1, v2) {
    if (v1 isnot :number) or (v2 isnot :number) {
        throw(:error)
    }
    `:number powf($v1.Number, 1/$v2.Number)`
}

func {%} (v1, v2) {
    if (v1 isnot :number) or (v2 isnot :number) {
        throw(:error)
    }
    `:number fmod($v1.Number, $v2.Number)`
}

;; RELATIONAL:  >=  >  <=  <

func {>=} (v1,v2) {
    if (v1 isnot :number) or (v2 isnot :number) {
        throw(:error)
    }
    `:bool ($v1.Number >= $v2.Number)`
}

func {>} (v1,v2) {
    if (v1 isnot :number) or (v2 isnot :number) {
        throw(:error)
    }
    `:bool ($v1.Number > $v2.Number)`
}

func {<=} (v1,v2) {
    if (v1 isnot :number) or (v2 isnot :number) {
        throw(:error)
    }
    `:bool ($v1.Number <= $v2.Number)`
}

func {<} (v1,v2) {
    if (v1 isnot :number) or (v2 isnot :number) {
        throw(:error)
    }
    `:bool ($v1.Number < $v2.Number)`
}

;; max, min

func min (v1, v2) {
    ((v1 < v2) and v1) or v2
}

func max (v1, v2) {
    ((v1 > v2) and v1) or v2
}

;; tostring, tonumber

func tostring (v) {
    ifs v {
        is :pointer -> {
            var i = 0
            var n = `:number strlen($v.Pointer)`
            var str = #[]
            while i < n {
                set str[#str] = `:char ((char*)$v.Pointer)[(int)$i.Number]`
                set i = i + 1
            }
            move(str)
        }
        is :number -> {
            ```
            static char str[255];
            snprintf(str, 255, "%g", $v.Number);
            ```
            tostring(`:pointer str`)
        }
        else -> v   ;; TODO
    }
}

func tonumber (v) {
    ifs v {
        ((v is :vector) and (#v > 0)) and (v[0] is :char) -> {
            `:number atoi($v.Dyn->Vector.mem)`
        }
        else -> v   ;; TODO
    }
}
