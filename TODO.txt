# BUGS

- detrack, scope 999
    - ll_track16_hold_err
- block defer should be after block clean up
- mudei coro,coros,track para isperm=0, preciso avaliar e testar
- como vou fazer com os holes?
    - o certo seria
        - ao terminar o loop
        - verificar que nao tem outra instancia na pilha
        - fazer o shift left
- checar todos os bcasts e testar se estou morto
    - todo_status5
- globals should be dyns like the others
    - currently they are not dealloc in block end

# NEXT

- task -> coro + task
- var evt :T
- var :noperm _x

- :error -> tag(:error,"message")
- [x,y] = tup (destructor)
- refer(track) -> coro
- test throw/break across fake task
- pub childs cannot be assigned
  - not even ahead b/c of coros which may kill pub
- count memory
- kill task
- tags hier
- tag of tag requires higher ID to avoid cycle
- polymorphism
    - poly var f = func (a:X, b:Y)
    - poly func f (a:X, b:Y)
    - set MAX :T = 10
- ~= (like)
    - 1 ~= "1"
    - #x ~= #x.y
    - str ~= ".*"
    - await/awaiting/every :type
- xceu
    - ifs exp as it { it==1 {} }
    - iter xs as x
    - do exp as it {}
- unify test/error/continue (macro or func?)

# BACK

- power assert
    group {
        var x = 10
        var y = f(x)
        assert x < z            ;; default/power message
        assert x > y, "error"   ;; custom message
    }
- native
    - `${complex-expr}` (nested parsing in w/ XCEU?)
- args keyword (or ...)
    - access to variable args from func args
- 1 >> f >> g -> g(f(1))
- parser
    - reject no assign stmts
        - defer
        - while
        - ?
    - reject anything after throw (last stmt)
    - reject yield with no direct enclosing task
- 3 `add` 4  -->  add(3,4)
- ceu2c
    - struct <- tuple
    - vec <- buf
- call w/o blocks optimize
- ranges
    - [1..2]
- traverse
    call fat (x=10) {
        if x == 1 {
            1
        } else {
            fat(x-1)
        }
    }

# IDEAS

- uv-ceu
- code NAV tree
- lessmilk
- 7 guis
- IUP + canvas
- doc pico-sdl/ceu
- incremental GC
    - is a coro itself (start from leaves, back to root)
- contracts
- android SDK
- modelo sincrono permite copiar memória em aplicações simétricos
    - Toda memória é gerenciada dict array task
- pico-sdl
    - image/font cache
- rx-ceu
    - Meier "dual" paper