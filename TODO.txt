# NEXT

- fake catch around while should not be in tostr
- test throw/break across fake task
- throw (err,val)
- while in bs, b
- parand/or as await task
- track may hold normal coro
  - bcast to awake on termination
- pub childs cannot be assigned
  - not even ahead b/c of coros which may kill pub
- count memory
- kill task
- await task
- local bcast
- tags
    - implement with vector or list?
    - tag hier or tag of tag?
- polymorphism
    - poly var
    - set f = func (a#x, b#y)
    - set MAX#x = 10
- ~= (like)
    - 1 ~= "1"
    - #x ~= #x.y
    - str ~= ".*"
    - await/awaiting/every :type
- xceu
    - ifs exp as it { it==1 {} }
    - iter xs as x
    - do exp as it {}
- unify test/error/continue (macro or func?)

# BACK

- copy x (deep copy)
- y = do { move x }
- same iface to all *create, no assert on malloc fail, all possible checks there
- power assert
- native
    - `:pre`
    - `${complex-expr}` (nested parsing in w/ XCEU?)
- emit local
    - imply outer task?
    - explicit #tag?
    - bcast in :x, y
- tuple is plain immutable value
    - move on assign
    - no scope error
    - unless holds dyns
- collections
    - tup.a, .b, .x
    - @dict, @[...]
    - #vec,  #[...], homogeneous, string
    - $size
- char type
- args keyword (or ...)
    - access to variable args from func args
- tag of tag requires higher ID to avoid cycle
- 1 >> f >> g -> g(f(1))
- parser
    - reject no assign stmts
        - defer
        - while
        - ?
    - reject anything after throw (last stmt)
    - reject yield with no direct enclosing task
- closures
    - only accept dyns as upvalue
    - has same scope as upval
- 3 `add` 4  -->  add(3,4)
- move as a primitive?
    - needs to move nested objs
    - var x = [...] ; move x (up)
- ceu2c
    - struct <- tuple
    - vec <- buf
- call w/o blocks optimize
- ranges
    - [1..2]
    - [1..2]

# IDEAS

- code NAV tree
- lessmilk
- 7 guis
- IUP
- doc pico-sdl/ceu
- incremental GC
    - is a coro itself (start from leaves, back to root)
- contracts
- android SDK