;; LOGICAL:  &&  ||  (TODO: remove after and/or ok)

var {&&}
set {&&} = func (v1, v2) {
    if v1 {
        v2
    } else {
        false
    }
}

var {||}
set {||} = func (v1, v2) {
    if v1 {
        true
    } else {
        v2
    }
}

;; ARITHMETIC:  +  -  *  /  %  **  //

var {+}
set {+} = func (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        throw(:error)
    } else {
        `:number ($v1.Number + $v2.Number)`
    }
}

var {-}
set {-} = func (v1, v2) {
    var t1
    set t1 = type(v1)
    var t2
    set t2 = type(v2)
    if (t1 == :number) && (t2 == :nil) {
        `:number (- $v1.Number)`
    } else {
        if (t1 /= :number) || (t2 /= :number) {
            throw(:error)
        } else {
            `:number ($v1.Number - $v2.Number)`
        }
    }
}

var {*}
set {*} = func (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        throw(:error)
    } else {
        `:number ($v1.Number * $v2.Number)`
    }
}

var {**}
set {**} = func (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        throw(:error)
    } else {
        `:number powf($v1.Number, $v2.Number)`
    }
}

var {/}
set {/} = func (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        throw(:error)
    } else {
        `:number ($v1.Number / $v2.Number)`
    }
}

var {//}
set {//} = func (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        throw(:error)
    } else {
        `:number powf($v1.Number, 1/$v2.Number)`
    }
}

var {%}
set {%} = func (v1, v2) {
    if (type(v1) /= :number) || (type(v2) /= :number) {
        throw(:error)
    } else {
        `:number fmod($v1.Number, $v2.Number)`
    }
}

;; RELATIONAL:  >=  >  <=  <

var {>=}
set {>=} = func (v1,v2) {
    var t1
    set t1 = type(v1)
    if (t1 /= type(v2)) || (t1 /= :number) {
        throw(:error)
    } else {
        `:bool ($v1.Number >= $v2.Number)`
    }
}

var {>}
set {>} = func (v1,v2) {
    var t1
    set t1 = type(v1)
    if (t1 /= type(v2)) || (t1 /= :number) {
        throw(:error)
    } else {
        `:bool ($v1.Number > $v2.Number)`
    }
}

var {<=}
set {<=} = func (v1,v2) {
    var t1
    set t1 = type(v1)
    if (t1 /= type(v2)) || (t1 /= :number) {
        throw(:error)
    } else {
        `:bool ($v1.Number <= $v2.Number)`
    }
}

var {<}
set {<} = func (v1,v2) {
    var t1
    set t1 = type(v1)
    if (t1 /= type(v2)) || (t1 /= :number) {
        throw(:error)
    } else {
        `:bool ($v1.Number < $v2.Number)`
    }
}
